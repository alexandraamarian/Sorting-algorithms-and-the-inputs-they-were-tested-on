#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int inputDataArray[], int leftIndex, int middleIndex, int rightIndex) {
    int i, j, k;
    int sizeLeft = middleIndex - leftIndex + 1;
    int sizeRight = rightIndex - middleIndex;

    int *leftArray = (int *)malloc(sizeLeft * sizeof(int));
    int *rightArray = (int *)malloc(sizeRight * sizeof(int));

    for (i = 0; i < sizeLeft; i++)
        leftArray[i] = inputDataArray[leftIndex + i];
    for (j = 0; j < sizeRight; j++)
        rightArray[j] = inputDataArray[middleIndex + 1 + j];

    i = 0;
    j = 0;
    k = leftIndex;

    while (i < sizeLeft && j < sizeRight) {
        if (leftArray[i] <= rightArray[j]) {
            inputDataArray[k] = leftArray[i];
            i++;
        } else {
            inputDataArray[k] = rightArray[j];
            j++;
        }
        k++;
    }

    while (i < sizeLeft) {
        inputDataArray[k] = leftArray[i];
        i++;
        k++;
    }

    while (j < sizeRight) {
        inputDataArray[k] = rightArray[j];
        j++;
        k++;
    }

    free(leftArray);
    free(rightArray);
}

void mergeSortAlg(int inputDataArray[], int leftIndex, int rightIndex) {
    if (leftIndex < rightIndex) {
        int middleIndex = leftIndex + (rightIndex - leftIndex) / 2;
        mergeSortAlg(inputDataArray, leftIndex, middleIndex);
        mergeSortAlg(inputDataArray, middleIndex + 1, rightIndex);
        merge(inputDataArray, leftIndex, middleIndex, rightIndex);
    }
}

void printArray(int size, int array[]) {
    for (int i = 0; i < size; i++)
        printf("%d ", array[i]);
    printf("\n");
}

int isSorted(int size, int array[]) {
    for (int i = 0; i < size - 1; i++) {
        if (array[i] > array[i + 1])
            return 0; // Not sorted
    }
    return 1; // Sorted
}

int main() {
    int i = 0;
    static int a[1000000];

    clock_t begin = clock();
    FILE *fptr;
    fptr = fopen("D:\\C\\c programms\\extralarge_similar_list.txt", "r");

    while (fscanf(fptr, "%d", &a[i]) == 1) {
        i++;
    }

    mergeSortAlg(a, 0, i - 1);
    fclose(fptr);
    clock_t end = clock();
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    printArray(i, a);

    if (isSorted(i, a))
        printf("Sorted\n");
    else
        printf("Not sorted\n");

    printf("\nTotal time spent = %f sec", time_spent);

    return 0;
}
