#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void quickSortAlg(int inputDataArray[], int low, int high) {
    int l, r, piv, aux;

    if (low < high) {
        piv = (low + high) / 2;
        l = low;
        r = high;

        while (l < r) {
            while (inputDataArray[l] <= inputDataArray[piv] && l < high)
                l++;
            while (inputDataArray[r] > inputDataArray[piv])
                r--;
            if (l < r) {
                aux = inputDataArray[l];
                inputDataArray[l] = inputDataArray[r];
                inputDataArray[r] = aux;
            }
        }
        aux = inputDataArray[piv];
        inputDataArray[piv] = inputDataArray[r];
        inputDataArray[r] = aux;
        quickSortAlg(inputDataArray, low, r - 1);
        quickSortAlg(inputDataArray, r + 1, high);
    }
}

void printArray(int size, int array[]) {
    for (int i = 0; i < size; i++)
        printf("%d ", array[i]);
    printf("\n");
}

int isSorted(int size, int array[]) {
    for (int i = 0; i < size - 1; i++) {
        if (array[i] > array[i + 1])
            return 0; // Not sorted
    }
    return 1; // Sorted
}

int main() {
    long i = 0;
    static int a[1000000];
    clock_t begin = clock();
    FILE *fptr;
    fptr = fopen("D:\\C\\c programms\\Almost sorted input (100.000 elements).txt", "r");
    while (fscanf(fptr, "%d", &a[i]) == 1) {
        i++;
    }
    quickSortAlg(a, 0, i - 1);
    fclose(fptr);
    clock_t end = clock();
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    printf("%d", i);
    
    if (isSorted(i, a))
        printf("Sorted\n");
    else
        printf("Not sorted\n");

    printf("Total time spent = %f sec\n", time_spent);
    return 0;
}
