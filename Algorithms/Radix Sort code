#include <stdio.h>
#include <time.h>

void countSort(long inputDataArray[], long size, long divisor) {
    static long result[1000000];
    long i, count[10] = {0};

    for (i = 0; i < size; i++)
        count[(inputDataArray[i] / divisor) % 10]++;

    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (i = size - 1; i >= 0; i--) {
        result[count[(inputDataArray[i] / divisor) % 10] - 1] = inputDataArray[i];
        count[(inputDataArray[i] / divisor) % 10]--;
    }

    for (i = 0; i < size; i++)
        inputDataArray[i] = result[i];
}

long getMax(long inputDataArray[], long size) {
    long maxV = inputDataArray[0];
    for (long i = 1; i < size; i++)
        if (inputDataArray[i] > maxV)
            maxV = inputDataArray[i];
    return maxV;
}

void radixSort(long inputDataArray[], long size) {
    long m = getMax(inputDataArray, size);
    for (long div = 1; m / div > 0; div *= 10)
        countSort(inputDataArray, size, div);
}

void printArray(long size, long array[]) {
    for (long i = 0; i < size; i++)
        printf("%ld ", array[i]);
    printf("\n");
}

int isSorted(long size, long array[]) {
    for (long i = 0; i < size - 1; i++) {
        if (array[i] > array[i + 1])
            return 0; // Not sorted
    }
    return 1; // Sorted
}

int main() {
    long i = 0;
    static long a[1000000];
    clock_t begin = clock();
    FILE *fptr;
    fptr = fopen("D:\\C\\c programms\\Almost sorted input (1.000.000 elements).txt", "r");

    while (fscanf(fptr, "%ld", &a[i]) == 1) {
        i++;
    }
    fclose(fptr);

    radixSort(a, i);

    clock_t end = clock();
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;

    if (isSorted(i, a))
        printf("Sorted\n");
    else
        printf("Not sorted\n");

    printf("Total time spent = %f sec\n", time_spent);
    return 0;
}
