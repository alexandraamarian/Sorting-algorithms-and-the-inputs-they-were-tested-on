#include <stdio.h>
#include <time.h>

void countsort(long a[], long n, long exp)
{
    static long output[1000000];
    long i, count[10] = { 0 };

    for (i = 0; i < n; i++)
        count[(a[i] / exp) % 10]++;

    for (i = 1; i < 10; i++)
        count[i] += count[i - 1];

    for (i = n - 1; i >= 0; i--)
    {
        output[count[(a[i] / exp) % 10] - 1] = a[i];
        count[(a[i] / exp) % 10]--;
    }
    for (i = 0; i < n; i++)
        a[i] = output[i];
}
int getMax(long a[], long n)
{
    long mx = a[0];
    for (long i = 1; i < n; i++)
        if (a[i] > mx)
            mx = a[i];
    return mx;
}
void radixsort(long a[], long n)
{
    long m = getMax(a, n);
    for (long exp = 1; m / exp > 0; exp *= 10)
        countsort(a, n, exp);
}
void printarray (long n, long array[])
{
    long i;
    for (i=0; i<n; i++)
        printf("%d ",array[i]);
    printf("\n");
}
int sortedcheck(long n, long a[]){
    for (long i = 0; i < n; ++i){
        if(a[n-1] < a[n-2])
            printf("Not sorted.");
    }
    printf("Sorted");
}
int main()
{
    long i=0;
    static long a[1000000];
    clock_t begin = clock();
    FILE* fptr;
    fptr = fopen("D:\\C\\c programms\\Almost sorted input (1.000.000 elements).txt", "r");

    while (fscanf(fptr, "%d", &a[i]) == 1)
    {
        i++;
    }
    fclose(fptr);

    radixsort(a,i);

    clock_t end = clock();
    double time_spent = (double)(end - begin)/CLOCKS_PER_SEC;

    sortedcheck(i,a);
    printf(" %d\n ",i);
    printf("Total time spent= %f sec",time_spent);
    return 0;
}
